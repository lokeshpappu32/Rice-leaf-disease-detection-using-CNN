# -*- coding: utf-8 -*-
"""mini_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11pMGs0A8JMjYWpGK6Rpp_IbETTA6juBT
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Define the path to your dataset
train_dir = '/content/drive/MyDrive/RiceLeafsDisease/train'
test_dir = '/content/drive/MyDrive/RiceLeafsDisease/test'

import os
# Get the class labels from the folder names in the train directory
train_labels = sorted(os.listdir(train_dir))

# Get the class labels from the folder names in the test directory
test_labels = sorted(os.listdir(test_dir))

# Print the class labels
print('Train Class Labels:', train_labels)
print('Test Class Labels:', test_labels)

# Define the class labels in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Set the image size and batch size
image_size = (800, 800)
batch_size = 32

# Data augmentation and normalization for training dataset
train_datagen = ImageDataGenerator(
    rescale=1./255,  # Normalize pixel values to [0, 1]
    rotation_range=20,  # Randomly rotate images
    horizontal_flip=True)  # Randomly flip images horizontally

# Load the training dataset
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',
    classes=class_names)

# Normalization for testing dataset (no augmentation)
test_datagen = ImageDataGenerator(rescale=1./255)
# Load the testing dataset
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',
    classes=class_names)

# Print the train labels
train_labels = train_generator.classes
print("Train Labels:")
print(train_labels)

# Print the test labels
test_labels = test_generator.classes
print("Test Labels:")
print(test_labels)

# Visualize sample images from each class
num_samples_per_class = 3
# Retrieve a batch of images and labels from the test generator
images, labels = next(test_generator)
# Plot sample images
fig, axes = plt.subplots(len(class_names), num_samples_per_class, figsize=(10, 10))

for i, ax in enumerate(axes):
    class_images = images[np.argmax(labels, axis=1) == i]
    class_name = class_names[i]

    num_samples = min(num_samples_per_class, class_images.shape[0])

    for j in range(num_samples):
        # Display sample images
        ax[j].imshow(class_images[j])
        ax[j].axis('off')
        ax[j].set_title(class_name)

    for j in range(num_samples, num_samples_per_class):
        # Remove unused subplots
        ax[j].remove()

plt.tight_layout()
plt.show()

# Define the CNN model architecture
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(800, 800, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')  # Assuming 4 disease classes
])

model.summary()

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_generator, epochs=30)

# Evaluate the model on the training dataset
train_loss, train_acc = model.evaluate(train_generator)
print('Train Loss:', train_loss)
print('Train Accuracy:', train_acc)

# Evaluate the model on the test dataset
test_loss, test_acc = model.evaluate(test_generator)
print('Test Loss:', test_loss)
print('Test Accuracy:', test_acc)

import numpy as np
import matplotlib.pyplot as plt

# Initialize variables to count the number of images per class
class_counts = [0] * len(class_names)

# Initialize lists to store the selected images and their labels
selected_images = []
selected_labels = []

# Iterate through the test dataset to select 10 images per class
for i in range(len(test_generator)):
    test_images, test_labels = next(test_generator)
    predicted_labels = np.argmax(model.predict(test_images), axis=1)

    for j in range(test_images.shape[0]):
        true_label = np.argmax(test_labels[j])

        # Check if the current image belongs to a class that still requires more samples
        if class_counts[true_label] < 10:
            selected_images.append(test_images[j])
            selected_labels.append(true_label)
            class_counts[true_label] += 1

        # Check if all classes have reached the desired number of samples
        if all(count == 10 for count in class_counts):
            break

    # Check if all classes have reached the desired number of samples
    if all(count == 10 for count in class_counts):
        break

# Convert the selected images and labels into NumPy arrays
selected_images = np.array(selected_images)
selected_labels = np.array(selected_labels)

# Make predictions on the selected images
predicted_labels = np.argmax(model.predict(selected_images), axis=1)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast','bacterial_leaf_blight','narrow_brown_spot']

# Visualize the predicted images and their labels
num_images = selected_images.shape[0]
num_rows = int(np.ceil(num_images / 5))
fig, axes = plt.subplots(num_rows, 5, figsize=(12, 2.5 * num_rows))
axes = axes.ravel()

for i in range(num_images):
    axes[i].imshow(selected_images[i])
    axes[i].set_title("Predicted: {}\nTrue: {}".format(class_names[predicted_labels[i]], class_names[selected_labels[i]]))
    axes[i].axis('off')

# Remove empty subplots
if num_images < len(axes):
    for j in range(num_images, len(axes)):
        fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Initialize variables to count the number of images per class
class_counts = [0] * len(class_names)

# Initialize lists to store the selected images and their labels
selected_images = []
selected_labels = []
predicted_probabilities = []  # To store the predicted probabilities

# Iterate through the test dataset to select 10 images per class
for i in range(len(test_generator)):
    test_images, test_labels = next(test_generator)
    predicted_labels = np.argmax(model.predict(test_images), axis=1)
    probabilities = model.predict(test_images)

    for j in range(test_images.shape[0]):
        true_label = np.argmax(test_labels[j])

        # Check if the current image belongs to a class that still requires more samples
        if class_counts[true_label] < 10:
            selected_images.append(test_images[j])
            selected_labels.append(true_label)
            predicted_probabilities.append(probabilities[j])
            class_counts[true_label] += 1

        # Check if all classes have reached the desired number of samples
        if all(count == 10 for count in class_counts):
            break

    # Check if all classes have reached the desired number of samples
    if all(count == 10 for count in class_counts):
        break

# Convert the selected images, labels, and probabilities into NumPy arrays
selected_images = np.array(selected_images)
selected_labels = np.array(selected_labels)
predicted_probabilities = np.array(predicted_probabilities)

# Make predictions on the selected images
predicted_labels = np.argmax(predicted_probabilities, axis=1)
predicted_confidences = np.max(predicted_probabilities, axis=1)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight','narrow_brown_spot']

# Visualize the predicted images, labels, and confidences
num_images = selected_images.shape[0]
num_rows = int(np.ceil(num_images / 5))
fig, axes = plt.subplots(num_rows, 5, figsize=(12, 2.5 * num_rows))
axes = axes.ravel()

for i in range(num_images):
    axes[i].imshow(selected_images[i])
    axes[i].set_title("Predicted: {}\nConfidence: {:.2f}\nTrue: {}".format(
        class_names[predicted_labels[i]], predicted_confidences[i], class_names[selected_labels[i]]))
    axes[i].axis('off')

# Remove empty subplots
if num_images < len(axes):
    for j in range(num_images, len(axes)):
        fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

model.save('Rice_Leaf_Disease_Detection.h5')

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_blast (345).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_blast (333).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_blast (339).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_blast (322).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/lb2.jpeg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/lb5.jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/lb3.jfif'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/bacterial_leaf_blight (322).JPG'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast','bacterial_leaf_blight','narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/bacterial_leaf_blight (335).JPG'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast','bacterial_leaf_blight','narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/bacterial_leaf_blight (346).JPG'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast','bacterial_leaf_blight','narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/bacterial_leaf_blight (339).JPG'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast','bacterial_leaf_blight','narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/bacterial_leaf_blight (335).JPG'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast','bacterial_leaf_blight','narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/narrow_brown (325).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/narrow_brown (348).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/narrow_brown (349).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/RiceLeafsDisease/test/narrow_brown_spot/narrow_brown_val (18).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_scald (342).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_scald (335).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_scald (327).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_scald (328).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the image
image_path = '/content/drive/MyDrive/samples/leaf_scald (326).jpg'  # Update with the path to your image
image = cv2.imread(image_path)
image = cv2.resize(image, (800, 800))
image = image.astype(np.float32) / 255.0
image = np.expand_dims(image, axis=0)

# Make predictions on the image
predicted_probabilities = model.predict(image)
predicted_label = np.argmax(predicted_probabilities)
predicted_confidence = np.max(predicted_probabilities)

# Define a list of class names in the desired order
class_names = ['leaf_scald', 'leaf_blast', 'bacterial_leaf_blight', 'narrow_brown_spot']

# Display the image
plt.imshow(cv2.cvtColor(image.squeeze(), cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.title('Predicted: {} (Confidence: {:.2f})'.format(class_names[predicted_label], predicted_confidence))

# Display the actual name entered by you
actual_label = input("Enter the actual label/name for the image: ")
plt.xlabel('Actual: {}'.format(actual_label))

plt.show()

model.save('RiceLeaf_Disease_Detection.h5')

# Print the test accuracy
print('Test Accuracy:', test_acc)

# Plot the accuracy values
plt.plot([0, 1], [0, train_acc], 'b', label='Train Accuracy')
plt.plot([0, 1], [0, test_acc], 'r', label='Test Accuracy')
plt.title('Training and Test Accuracy')
plt.xlabel('Dataset')
plt.ylabel('Accuracy')
plt.legend()
plt.xticks([0, 1], ['Train', 'Test'])
plt.show()

# Number of epochs
epochs = range(1, len(train_acc_values) + 1)

# Plot the accuracy values
plt.plot(epochs, train_acc_values, 'b', label='Train Accuracy')
plt.plot(epochs, test_acc_values, 'r', label='Test Accuracy')
plt.title('Epochs vs. Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

